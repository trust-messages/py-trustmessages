# Auto-generated by asn1ate on 2017-02-14 12:30:27.429829
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful


class Format(univ.ObjectIdentifier):
    pass


class BinaryTime(univ.Integer):
    pass


class Service(char.PrintableString):
    pass


class Entity(char.PrintableString):
    pass


class Trust(univ.Sequence):
    pass


Trust.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 8))
Trust.componentType = namedtype.NamedTypes(
    namedtype.NamedType('target', Entity()),
    namedtype.NamedType('service', Service()),
    namedtype.NamedType('date', BinaryTime()),
    namedtype.NamedType('value', univ.Any())
)


class TrustResponse(univ.Sequence):
    pass


TrustResponse.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 3))
TrustResponse.componentType = namedtype.NamedTypes(
    namedtype.NamedType('provider', Entity()),
    namedtype.NamedType('format', Format()),
    namedtype.NamedType('rid', univ.Integer()),
    namedtype.NamedType('response', univ.SequenceOf(componentType=Trust()))
)


class Value(univ.Choice):
    pass


Value.componentType = namedtype.NamedTypes(
    namedtype.NamedType('source', Entity().subtype(implicitTag=tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0))),
    namedtype.NamedType('target', Entity().subtype(implicitTag=tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 1))),
    namedtype.NamedType('date', BinaryTime().subtype(implicitTag=tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 2))),
    namedtype.NamedType('service', Service().subtype(implicitTag=tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 3)))
)


class Comparison(univ.Sequence):
    pass


Comparison.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 4))
Comparison.componentType = namedtype.NamedTypes(
    namedtype.NamedType('op', univ.Enumerated(namedValues=namedval.NamedValues(('eq', 0), ('ne', 1), ('lt', 2), ('le', 3), ('gt', 4), ('ge', 5)))),
    namedtype.NamedType('value', Value())
)


class Logical(univ.Sequence):
    pass


class Query(univ.Choice):
    pass

for _ in range(10):
    Logical.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 5))
    Logical.componentType = namedtype.NamedTypes(
        namedtype.NamedType('op', univ.Enumerated(namedValues=namedval.NamedValues(('and', 0), ('or', 1)))),
        namedtype.NamedType('l', Query()),
        namedtype.NamedType('r', Query())
    )
    Query.componentType = namedtype.NamedTypes(
        namedtype.NamedType('cmp', Comparison()),
        namedtype.NamedType('log', Logical())
    )


class TrustRequest(univ.Sequence):
    pass


TrustRequest.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 2))
TrustRequest.componentType = namedtype.NamedTypes(
    namedtype.NamedType('rid', univ.Integer()),
    namedtype.NamedType('query', Query())
)


class Assessment(univ.Sequence):
    pass


Assessment.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 9))
Assessment.componentType = namedtype.NamedTypes(
    namedtype.NamedType('source', Entity()),
    namedtype.NamedType('target', Entity()),
    namedtype.NamedType('service', Service()),
    namedtype.NamedType('date', BinaryTime()),
    namedtype.NamedType('value', univ.Any())
)


class Fault(univ.Sequence):
    pass


Fault.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 10))
Fault.componentType = namedtype.NamedTypes(
    namedtype.NamedType('value', univ.Enumerated(namedValues=namedval.NamedValues(('invalid-parameters', 0), ('internal-error', 1)))),
    namedtype.NamedType('message', char.PrintableString())
)


class AssessmentResponse(univ.Sequence):
    pass


AssessmentResponse.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 7))
AssessmentResponse.componentType = namedtype.NamedTypes(
    namedtype.NamedType('provider', Entity()),
    namedtype.NamedType('format', Format()),
    namedtype.NamedType('rid', univ.Integer()),
    namedtype.NamedType('response', univ.SequenceOf(componentType=Assessment()))
)


class AssessmentRequest(univ.Sequence):
    pass


AssessmentRequest.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 6))
AssessmentRequest.componentType = namedtype.NamedTypes(
    namedtype.NamedType('rid', univ.Integer()),
    namedtype.NamedType('query', Query())
)


class FormatResponse(univ.Sequence):
    pass


FormatResponse.tagSet = univ.Sequence.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatConstructed, 1))
FormatResponse.componentType = namedtype.NamedTypes(
    namedtype.NamedType('format', Format()),
    namedtype.NamedType('assessment', char.PrintableString()),
    namedtype.NamedType('trust', char.PrintableString())
)


class FormatRequest(univ.Null):
    pass


FormatRequest.tagSet = univ.Null.tagSet.tagImplicitly(tag.Tag(tag.tagClassApplication, tag.tagFormatSimple, 0))


class Message(univ.Choice):
    pass


Message.componentType = namedtype.NamedTypes(
    namedtype.NamedType('assessment-request', AssessmentRequest()),
    namedtype.NamedType('assessment-response', AssessmentResponse()),
    namedtype.NamedType('trust-request', TrustRequest()),
    namedtype.NamedType('trust-response', TrustResponse()),
    namedtype.NamedType('format-request', FormatRequest()),
    namedtype.NamedType('format-response', FormatResponse()),
    namedtype.NamedType('fault', Fault())
)
